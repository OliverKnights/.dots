# remap prefix
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\\'  'select-pane -l'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

####### Make things as similar to vim as possible #########
# The primary idea is to have pane commands similar to window commands in vim
# and window commands in tmux similar to tab commands in vim
# obviously this doesn't work everywhere, but keep it as consistent as possible

# split pane vertically, starting in the directory we split from
bind v split-window -h -c '#{pane_current_path}'
bind C-v split-window -h -c '#{pane_current_path}'

# split pane horizontally, starting in the directory we split from
bind s split-window -v -c '#{pane_current_path}'
bind C-s split-window -v -c '#{pane_current_path}'

# Join and send panes
# session:window.pane or :window.pane or :window
bind f command-prompt -p "Join pane from:"  "join-pane -s '%%'"
bind t command-prompt -p "Send pane to:"  "join-pane -t '%%'"

# New window, starting in the directory of the current window
unbind -T prefix c
bind  n new-window -c '#{pane_current_path}'
bind C-n new-window -c '#{pane_current_path}'

# Close window
unbind -T prefix '&'
bind c kill-window
bind C-c kill-window

# Last used window
bind -n C-o last-window

# Alt-num to change windows
bind -n C-1 select-window -t 1
bind -n C-2 select-window -t 2
bind -n C-3 select-window -t 3
bind -n C-4 select-window -t 4
bind -n C-5 select-window -t 5
bind -n C-6 select-window -t 6
bind -n C-7 select-window -t 7
bind -n C-8 select-window -t 8
bind -n C-9 select-window -t 9
bind -n C-0 select-window -t 0

# Interactively choose session
bind i choose-tree -s
bind C-i choose-tree -s

# Interactively choose window
bind w choose-tree -w
bind C-w choose-tree -w

# Copy mode if you're still holding down meta from prefix
bind C-[ copy-mode

# Detach easily
bind C-d detach

# Zoom easily
bind C-z resize-pane -Z

# Reload
bind R source-file ~/.tmux.conf

# Make copy mode more consistent with vim
bind -T copy-mode-vi v send -X begin-selection
# y yanks but stays in copy mode
bind -T copy-mode-vi y send-keys -X copy-pipe "xclip -sel clip -i"

# increase scrollback history
set -g history-limit 10000

# keep sequential numbers when deleting windows
set -g renumber-windows on

# No delay for escape key press
# -g sets global
# -s sets the option for the server (as opposed to a window or session)
set -sg escape-time 0

set -g mouse on

# use readline bindings in command prompt (makes escape close)
set -g status-keys emacs

# makes vim autocommands FocusGained and FocusLost work (autosaving etc..)
set -g focus-events on

# set colors correctly
# https://wiki.archlinux.org/index.php/Tmux#Setting_the_correct_term
# Backspace breaks in alacritty when using tmux-256color, screen seems to work..
if-shell 'infocmp tmux-256color' 'set -g default-terminal "tmux-256color"' 'set -g default-terminal "screen-256color"'
if-shell 'infocmp tmux-256color' 'set -ga terminal-overrides ",tmux-256color:Tc"' 'set -ga terminal-overrides ",screen-256color:Tc"'

# use vim bindings in copy mode
setw -g mode-keys vi

# Start windows and panes at 1, not 0
set -g base-index 1

# Same for panes
setw -g pane-base-index 1

###### Style ######

%hidden bg='#eeeeee'
%hidden darker_bg='#e3e1e1'
%hidden even_darker_bg='#DADADA'
%hidden light_blue='#5eb3e0'
%hidden red='#ff0000'

# Pastel scheme
%hidden pastel_blue='#F0DEFD'
%hidden pastel_rose='#FDDFDF'
%hidden pastel_green='#DEFDE0'
%hidden charcoal_grey='#36454f'

set -g status-style "bg=$bg fg=white"
set -g status-justify "left"
set -g status-position "top"

set -g status-left ""
set -g status-left-style "bg=#faf0af"

set -g status-right "[#S]"
set -g status-right-style "bg=#faf0af"

# Active window style
set -g window-status-current-format " #I #W "
set -g window-status-current-style "bg=$pastel_green fg=$charcoal_grey"

# # Non active window styles
set -g window-status-format " #I #W "
set -g window-status-style "bg=$pastel_blue fg=$charcoal_grey"

# # Style for the last selected window
set -g window-status-last-style "bg=$pastel_rose fg=$charcoal_grey"

set -g window-status-separator ""

set-option -g set-titles on
set-option -g set-titles-string "#S / #W"
